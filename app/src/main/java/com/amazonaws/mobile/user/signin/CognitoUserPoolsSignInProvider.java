package com.amazonaws.mobile.user.signin;
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.15
//

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.util.Log;
import com.amazonaws.mobile.AWSConfiguration;
import com.amazonaws.mobile.ns.NSSignInRequest;
import com.amazonaws.mobile.ns.NSForgetPasswordRequest;
import com.amazonaws.mobile.ns.NSMFARequest;
import com.amazonaws.mobile.ns.NSProvider;
import com.amazonaws.mobile.ns.NSSignUpRequest;
import com.amazonaws.mobile.ns.NSSignUpConfirmationCodeRequest;
import com.amazonaws.mobile.user.IdentityManager;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoDevice;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUserAttributes;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUserCodeDeliveryDetails;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUserPool;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUserSession;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.AuthenticationContinuation;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.AuthenticationDetails;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.ChallengeContinuation;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.ForgotPasswordContinuation;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.MultiFactorAuthenticationContinuation;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.AuthenticationHandler;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.ForgotPasswordHandler;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.GenericHandler;
import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.SignUpHandler;
import com.amazonaws.services.cognitoidentityprovider.model.RespondToAuthChallengeResult;

import java.util.concurrent.CountDownLatch;


/**
 * Manages sign-in using Cognito User Pools.
 */
public class CognitoUserPoolsSignInProvider implements SignInProvider {
    /**
     * Cognito User Pools attributes.
     */
    public final class AttributeKeys {
        /** Given name attribute. */
        public static final String GIVEN_NAME = "given_name";

        /** Email address attribute. */
        public static final String EMAIL_ADDRESS = "email";

        /** Phone number attribute. */
        public static final String PHONE_NUMBER = "phone_number";
    }

    /** Log tag. */
    private static final String LOG_TAG = CognitoUserPoolsSignInProvider.class.getSimpleName();


    /** The sign-in results adapter from the SignInManager. */
    private IdentityManager.SignInResultsHandler resultsHandler;

    /** Forgot Password processing provided by the Cognito User Pools SDK. */
    private ForgotPasswordContinuation forgotPasswordContinuation;

    /** MFA processing provided by the Cognito User Pools SDK. */
    private MultiFactorAuthenticationContinuation multiFactorAuthenticationContinuation;

    /** Android context. */
    private final Context context;

    /** Sign-in username. */
    private String username;

    /** Sign-in password. */
    private String password;

    /** Active Cognito User Pool. */
    private CognitoUserPool cognitoUserPool;

    /** Active Cognito User Pools session. */
    private CognitoUserSession cognitoUserSession;

    /** Latch to ensure Cognito User Pools SDK is initialized before attempting to read the authorization token. */
    private final CountDownLatch initializedLatch = new CountDownLatch(1);

    /**
     * Handle callbacks from the Forgot Password flow.
     */
    private ForgotPasswordHandler forgotPasswordHandler = new ForgotPasswordHandler() {
        @Override
        public void onSuccess() {
            Log.d(LOG_TAG, "Password change succeeded.");
            NSProvider.getForgetPasswordHandler().onSuccess();
        }

        @Override
        public void getResetCode(final ForgotPasswordContinuation continuation) {
            forgotPasswordContinuation = continuation;
            NSProvider.getForgetPasswordHandler().onActivity();
        }

        @Override
        public void onFailure(final Exception exception) {
            Log.e(LOG_TAG, "Password change failed.", exception);
            NSProvider.getForgetPasswordHandler().onFailure(exception);
        }
    };

    /**
     * Handle callbacks from the Sign Up flow.
     */
    private SignUpHandler signUpHandler = new SignUpHandler() {
        @Override
        public void onSuccess(final CognitoUser user, final boolean signUpConfirmationState,
                              final CognitoUserCodeDeliveryDetails cognitoUserCodeDeliveryDetails) {
            if (signUpConfirmationState) {
                Log.d(LOG_TAG, "Signed up. User ID = " + user.getUserId());
                NSProvider.getSignUpHandler().onSuccess(user, cognitoUserCodeDeliveryDetails);

            } else {
                Log.w(LOG_TAG, "Additional confirmation for sign up.");
                NSProvider.getSignUpConfirmationCodeHandler().onActivity();
            }
        }

        @Override
        public void onFailure(final Exception exception) {
            Log.e(LOG_TAG, "Sign up failed.", exception);
            NSProvider.getSignUpHandler().onFailure(exception);
        }
    };

    /**
     * Handle callbacks from the Sign Up - Confirm Account flow.
     */
    private GenericHandler signUpConfirmationHandler = new GenericHandler() {
        @Override
        public void onSuccess() {
            Log.i(LOG_TAG, "Confirmed.");
            NSProvider.getSignUpConfirmationCodeHandler().onSuccess();
        }

        @Override
        public void onFailure(Exception exception) {
            Log.e(LOG_TAG, "Failed to confirm user.", exception);
            NSProvider.getSignUpConfirmationCodeHandler().onFailure(exception);
        }
    };

    /**
     * Handle callbacks from the Authentication flow. Includes MFA handling.
     */
    private AuthenticationHandler authenticationHandler = new AuthenticationHandler() {
        @Override
        public void onSuccess(final CognitoUserSession userSession, final CognitoDevice newDevice) {
            Log.i(LOG_TAG, "Logged in. " + userSession.getIdToken());

            cognitoUserSession = userSession;

            //NSProvider.getSignInHandler().onSuccess(CognitoUserPoolsSignInProvider.this);

            //if (null != resultsHandler) {
                resultsHandler.onSuccess(CognitoUserPoolsSignInProvider.this);
            //}

            initializedLatch.countDown();
        }

        @Override
        public void getAuthenticationDetails(
                final AuthenticationContinuation authenticationContinuation, final String userId) {

            if (null != username && null != password) {
                final AuthenticationDetails authenticationDetails = new AuthenticationDetails(
                        username,
                        password,
                        null);

                //NSProvider.getSignInHandler().onGetAuthenticationDetails();

                authenticationContinuation.setAuthenticationDetails(authenticationDetails);
                authenticationContinuation.continueTask();
            }

            initializedLatch.countDown();
        }

        @Override
        public void getMFACode(final MultiFactorAuthenticationContinuation continuation) {
            multiFactorAuthenticationContinuation = continuation;
            NSProvider.getMfaHandler().onActivity();
        }

        @Override
        public void authenticationChallenge(final ChallengeContinuation continuation) {
            throw new UnsupportedOperationException("Not supported in this sample.");
        }

        @Override
        public void onFailure(final Exception exception) {
            Log.e(LOG_TAG, "Failed to login.", exception);

            //NSProvider.getSignInHandler().onFailure(exception);

            resultsHandler.onError(CognitoUserPoolsSignInProvider.this, exception);


            initializedLatch.countDown();
        }
    };

    /**
     * Constructor. Initializes the Cognito User Pool.
     * @param context Android context.
     */
    public CognitoUserPoolsSignInProvider(final Context context) {
        this.context = context;

        this.cognitoUserPool = new CognitoUserPool(context,
                AWSConfiguration.AMAZON_COGNITO_USER_POOL_ID,
                AWSConfiguration.AMAZON_COGNITO_USER_POOL_CLIENT_ID,
                AWSConfiguration.AMAZON_COGNITO_USER_POOL_CLIENT_SECRET,
                AWSConfiguration.AMAZON_COGNITO_REGION);

        cognitoUserPool.getCurrentUser().getSession(authenticationHandler);
    }


    @Override
    public boolean isRequestCodeOurs(int requestCode) {
        return false;
    }

    @Override
    public void handleActivityResult(int requestCode, int resultCode, Intent data) {

    }

    /** {@inheritDoc} */
    @Override
    public void initialize(final Activity signInActivity, final IdentityManager.SignInResultsHandler resultsHandler) {

        this.resultsHandler = resultsHandler;

        NSProvider.setForgetPasswordRequest(new NSForgetPasswordRequest() {
            @Override
            public void request(String username, String newPassword, String verificationCode) {

                Log.d(LOG_TAG, "verificationCode = " + verificationCode);

                if(forgotPasswordContinuation != null) {
                    forgotPasswordContinuation.setPassword(newPassword);
                    forgotPasswordContinuation.setVerificationCode(verificationCode);
                    forgotPasswordContinuation.continueTask();
                }else {
                    final CognitoUser cognitoUser = cognitoUserPool.getUser(username);
                    cognitoUser.confirmPasswordInBackground(verificationCode, newPassword, forgotPasswordHandler);
                }

            }

            public void request(String username){
                if (null == username || username.length() < 1) {
                    Log.w(LOG_TAG, "Missing username.");

                    NSProvider.getForgetPasswordHandler().onFailure(new Exception("Missing username"));

                } else {

                    final CognitoUser cognitoUser = cognitoUserPool.getUser(username);

                    cognitoUser.forgotPasswordInBackground(forgotPasswordHandler);
                }
            }

        });

        NSProvider.setSignUpRequest(new NSSignUpRequest() {
            @Override
            public void request(String username, String password, String givenName, String email, String phone) {
                Log.d(LOG_TAG, "username = " + username);
                Log.d(LOG_TAG, "given_name = " + givenName);
                Log.d(LOG_TAG, "email = " + email);
                Log.d(LOG_TAG, "phone = " + phone);

                final CognitoUserAttributes userAttributes = new CognitoUserAttributes();
                userAttributes.addAttribute(AttributeKeys.GIVEN_NAME, givenName);
                userAttributes.addAttribute(AttributeKeys.EMAIL_ADDRESS, email);

                if (null != phone && phone.length() > 0) {
                    userAttributes.addAttribute(AttributeKeys.PHONE_NUMBER, phone);
                }

                cognitoUserPool.signUpInBackground(username, password, userAttributes,
                        null, signUpHandler);
            }
        });

        NSProvider.setSignInRequest(new NSSignInRequest() {
            @Override
            public void request(String username, String password) {
                CognitoUserPoolsSignInProvider.this.username = username;
                CognitoUserPoolsSignInProvider.this.password = password;
                final CognitoUser cognitoUser = cognitoUserPool.getUser(username);
                cognitoUser.getSessionInBackground(authenticationHandler);
            }
        });

        NSProvider.setSignUpConfirmationCodeRequest(new NSSignUpConfirmationCodeRequest() {
            @Override
            public void request(String username, String verificationCode) {


                Log.d(LOG_TAG, "username = " + username);
                Log.d(LOG_TAG, "verificationCode = " + verificationCode);

                final CognitoUser cognitoUser = cognitoUserPool.getUser(username);
                cognitoUser.confirmSignUpInBackground(verificationCode, true, signUpConfirmationHandler);

            }
        });

        NSProvider.setMfaRequest(new NSMFARequest() {
            @Override
            public void request(String verificationCode) {
                multiFactorAuthenticationContinuation.setMfaCode(verificationCode);
                multiFactorAuthenticationContinuation.continueTask();
            }
        });

    }

    /** {@inheritDoc} */
    @Override
    public String getDisplayName() {
        return "Amazon Cognito Your User Pools";
    }

    /** {@inheritDoc} */
    @Override
    public String getCognitoLoginKey() {
        final String key = "cognito-idp." + AWSConfiguration.AMAZON_COGNITO_REGION.getName()
                + ".amazonaws.com/" + AWSConfiguration.AMAZON_COGNITO_USER_POOL_ID;
        Log.d(LOG_TAG, key);

        return key;
    }

    /** {@inheritDoc} */
    @Override
    public boolean isUserSignedIn() {
        try {
            initializedLatch.await();
        } catch (final InterruptedException ex) {
            Log.e(LOG_TAG,"Unexpected interrupt.", ex);
        }

        return null != cognitoUserSession && cognitoUserSession.isValid();
    }

    /** {@inheritDoc} */
    @Override
    public String getToken() {
        return null == cognitoUserSession ? null : cognitoUserSession.getIdToken().getJWTToken();
    }

    /** {@inheritDoc} */
    @Override
    public String refreshToken() {
        // Cognito User Pools SDK handles token refresh.
        return getToken();
    }

    /** {@inheritDoc} */
    @Override
    public void signOut() {
        if (null != cognitoUserPool && null != cognitoUserPool.getCurrentUser()) {
            cognitoUserPool.getCurrentUser().signOut();

            cognitoUserSession = null;
            username = null;
            password = null;
        }
    }

    /** {@inheritDoc} */
    @Override
    public String getUserName() {
        if (null == username) {
            if (null != cognitoUserPool && null != cognitoUserPool.getCurrentUser()) {
                username = cognitoUserPool.getCurrentUser().getUserId();
            }
        }

        return username;
    }

    /** {@inheritDoc} */
    @Override
    public String getUserImageUrl() {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public void reloadUserInfo() {
        // Cognito User Pools SDK handles user details refresh when token is refreshed.
        getToken();
    }
}
